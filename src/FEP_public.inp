# public functions
function void applyFCtests (bundle *b, string which)

    strings testcodes = strsplit(strstrip(which))
    loop i = 1..nelem(testcodes) --quiet
        # I hope no earlier test overwrites bundle elements
        # that would confuse the later tests...?

        which = testcodes[i]
        check_series_in_b(b, which)

        if which == "DM"
            doDMtest(&b)	# Diebold & Mariano
        elif which == "GW"
            doGWtest(&b)	# Giacomini & White
        elif which == "MZ"
            doMZtest(&b)	# Mincer & Zarnowitz
        elif which == "HP"
            doHPtest(&b)	# Holden-Peel (ex-Kirchgässner)
        elif which == "CG"
            doCGtest(&b)	# Campbell & Ghysels

        elif which == "EKT"
            scalar alreadyEKT = 0
            if inbundle(b, "y")
                # accomodate old-style interface with matrix
                if typestr(typeof(b.y)) == "matrix"
                    matrix b.fcerrors = b.y
                    doEKTtest_matrix(&b)	# Elliott, Komunjer, Timmermann
                    alreadyEKT = 1
                endif
            endif
            if !alreadyEKT
                doEKTtest(&b)
            endif

        elif which == "DL"
            doDLtest(&b)	# Diebold & Lopez
        elif which == "KS"
            doKS(&b)	# Kuipers Score
        elif which == "PT"
            doPTtest(&b)	# Pesaran & Timmermann (1992)
        elif which == "PS"
            doPS(&b)	# probability score

        elif which == "CW"	# Clark-West
            doCWtest(&b)
        endif

    endloop

end function

###############


function matrix getLoss (matrix fce "FC (errors)",
      string LF[null] "Loss function",
      matrix param[null] "Loss func parameter(s)",
      const matrix realiz[null] "Realizations")
    /*
       Returns a matrix with forecast error losses, of the same (T x k)
       dimension as the input matrix fce.
       'LF' can be:
       "ll" (or "linlin"), "qq" (or "quadquad"), "square" (or "sq"), "abs", "linex" (Varian 1975), "dlinex" (or "dle") for double linex (Granger 1999).
       default: squared errors
       'fce' is understood to be a matrix (Txk) of forecast errors, except if 'realiz' is also given: then 'fce' must be the
       forecasts themselves, and the errors are calculated as realiz - fce.
       'param' must be a 1-element or 2-element vector. Note: where only
       one input parameter is needed, gretl accepts a scalar as a 1x1 matrix.
       The default parameters (if param is left as null) are 0.5.
       (Also for the two-param case: {0.5; 0.5}.)
       For comparability between asymmetric linlin and symmetric abs on the
       one hand, and between asymm. quadquad and symm. square on the other
       hand, the symmetric losses are multiplied with 0.5 by default.
       (Such that for example getLoss(fce, "linlin") and getLoss(fce, "abs")
       give the same result.)
       To override this set param==1 explicitly, e.g. to get the pure squared
       error loss use getLoss(fce, "sq", 1), or use 2 * getLoss(fce)
       -- hey, in those simple cases you could also do fce.^2 yourself!
    */
    # calculate FC errors if realiz are given
    if exists(realiz)
        if rows(realiz) != rows(fce)
            funcerr "Length of forecasts and realizations unmatched."
        elif cols(realiz) > 1
            funcerr "Realizations must be a column vector."
        endif
        # repeat realizations if several FCs are given
        fce = mshape(realiz, rows(fce), cols(fce)) - fce
    endif
    # process user choice / internal notation
    if !exists(LF)
        string LF = "sq"	# default
    elif strlen(strstr("square", LF)) # includes sq
        LF = "sq"
    elif strlen(strstr("ll linlin", LF))
        LF = "ll"
    elif strlen(strstr("qq quadquad", LF))
        LF = "qq"
    elif strlen(strstr("abs linex", LF))
        # OK, no action needed, use "abs" or "linex" directly
    elif strlen(strstr("dlinex dle", LF)) # attention, must come after linex
        LF = "dle"	# double linex
    else
        funcerr "Loss function choice not recognized."
    endif
    # process parameters
    if strlen(strstr("sq abs ll qq linex", LF))
        if exists(param)
            param = param[1,1] # only one parameter
            if (LF != "linex") && ( param[1] < 0 )
                funcerr "Parameter must be non-negative."
            elif strlen(strstr("ll qq", LF)) && ( param[1] > 1 )
                funcerr "Parameter too large (>1) for linlin or quadquad."
            endif
        else
            matrix param = {0.5}	# default
        endif
    elif LF == "dle"
        if exists(param)
            if nelem(param) < 2
                funcerr "Need 2-elem param vector for double linex."
            elif sum(param .< 0)
                funcerr "Parameters must be positive for double linex."
            endif
            param = vec(param)[1:2]	# two params for double linex
        else
            matrix param = {0.5; 0.5}
        endif
    endif
    # actual calculation
    matrix loss
    if LF == "sq"
        loss = param * (fce .^2)	# trivial except for scaling
    elif LF == "abs"
        loss = param * abs(fce)	# also trivial
    elif LF == "ll"
        loss = fce .* ( param - (fce .< 0) )
        # old: loss = abs(fce) .* ( param + (1 - 2 * param) * (fce .< 0) )
    elif LF == "qq"
        loss = (fce .^2) .* ( param + (1 - 2 * param) * (fce .< 0) )
    elif LF == "linex"
        loss = exp(param .* fce) - param .* fce - 1
    elif LF == "dle"
        loss = exp(param[1] .* fce) + exp(-param[2] .* fce) - (param[1] - param[2]) .* fce - 2
    else
        funcerr "shouldn't happen"
    endif
    return loss
end function

###################

function void DrawLoss (int p[1:2:1] "Loss type",
                        scalar aT[0:1:0.5] "AlphaHat",
                        scalar V "Variance of aT",
                        string fpath[null] "Path ...")
    if !exists(fpath)
        fpath = "display"
    endif
    string S = (fpath == "display") ? "png" : "pdf"
    string ltype = (p == 1) ? "Lin.-Lin." : "Quad.-Quad."
    matrix vE = seq(-1,1,0.01)'
    matrix vBin = (vE .< 0)
    matrix LF = (p == 1) ? abs(vE) : vE .^2 # spart Berechnungen
    if aT == 0.5
        LF = LF*0.5
    else
        LF = LF.* (aT + (1 - 2 * aT) * (vE .< 0) )
    endif
    if V!=0
        scalar aTlow = aT-2*sqrt(V)		# -2 S.E.
        matrix LFlow = (aTlow + vBin.*(1-aTlow*2)).*abs(vE).^p
        scalar aTup = aT+2*sqrt(V)		# +2 S.E.
        matrix LFup = (aTup + vBin.*(1-aTup*2)).*abs(vE).^p
        matrix mplot = LF~LFlow~LFup~vE
        sprintf optt "set title '%s, alpha-hat=%.3g (±2 S.E.)", ltype, aT
    else
        matrix mplot = LF~vE
        sprintf optt "set title '%s, alpha-hat=%.3g", ltype, aT
    endif
    plot mplot
        options with-lines fit=none --single-yaxis
        literal set nokey
        #printf "set term @S font 'Helvetica,15' lw 1.5"
        printf "%s", optt
        printf "set ylabel 'Loss' font ',15'"
        printf "set xlabel 'Forecast Error' offset 0,0.75 font ',15'"
        literal set y2tics
        #add a slight grid to make it easier to follow the exact position of the curves
        literal set style line 12 lc rgb "#808080" lt 0 lw 1	# light grey color
        literal set grid back ls 12
        #literal set for [i=2:3] linetype i dashtype i
        literal set linetype 1 lc rgb 'black' lw 2.5
        literal set linetype 2 lc rgb 'black' lw 1.5
        literal set linetype 3 lc rgb 'black' lw 1.5
    end plot --output="@fpath"
end function

#################

function void DrawLoss2 (int p[1:2:1] "Loss type",
                         scalar aT1[0:1:0.5] "AlphaHat(1)",
      scalar V1 "Variance of aT(1)",
      scalar aT2[0:1:0.5] "AlphaHat(2)",
      scalar V2 "Variance of aT(2)",
      string fpath[null] "Path ...")
    if !exists(fpath)
        fpath = "display"
    endif
    string S = (fpath == "display") ? "png" : "pdf"
    string ltype = (p == 1) ? "Lin.-Lin." : "Quad.-Quad."
    matrix vE = seq(-1,1,0.01)'
    matrix vBin = (vE .< 0)
    loop i=1..2 -q
        #matrix LF$i  = (aT$i + vBin.*(1-aT$i*2)).*abs(vE).^p
        matrix LF$i = (p == 1) ? abs(vE) : vE .^2
    endloop
    loop i=1..2 -q
        if aT$i == 0.5
            LF$i = LF$i*0.5
        else
            LF$i = LF$i.* (aT$i + (1 - 2 * aT$i) * (vE .< 0) )
        endif
    endloop
    if V1!=0 && V2!=0
        matrix mplot = {}
        loop i=1..2 -q
            scalar aTlow$i = aT$i-2*sqrt(V$i) 	# -2 S.E.
            matrix LFlow$i = (aTlow$i + vBin.*(1-aTlow$i*2)).*abs(vE).^p
            scalar aTup$i = aT$i+2*sqrt(V$i)		# +2 S.E.
            matrix LFup$i = (aTup$i + vBin.*(1-aTup$i*2)).*abs(vE).^p
            matrix mplot ~= LF$i~LFlow$i~LFup$i
        endloop
    endif
    if V1!=0 && V2!=0
        mplot~=vE
        sprintf optt "set title '%s, a1=%.3g, a2=%.3g (±2 S.E.)", ltype, aT1, aT2
    else
        matrix mplot = LF~vE
        sprintf optt "set title '%s, a1=%.3g, a2=%.3g", ltype, aT1, aT2
    endif
    plot mplot
        options with-lp fit=none --single-yaxis
        #options band=B,2 band-style=fill
        literal set nokey
        #printf "set term @S font 'Helvetica,15' lw 1.5"
        printf "%s", optt
        printf "set ylabel 'Loss' font ',15'"
        printf "set xlabel 'Forecast Error' offset 0,0.75 font ',15'"
        literal set y2tics
        #add a slight grid to make it easier to follow the exact position of the curves
        literal set style line 12 lc rgb "#808080" lt 0 lw 1	# light grey color
        literal set grid back ls 12
        #literal set for [i=2:3] linetype i dashtype i
        literal set linetype 1 lc rgb 'black' lw 2.5 pt 1 ps 1.0 pointinterval 5
        literal set linetype 2 lc rgb 'black' lw 0.75 pt 1 ps 0.5 pointinterval 5
        literal set linetype 3 lc rgb 'black' lw 0.75 pt 1 ps 0.5 pointinterval 5
        literal set linetype 4 lc rgb 'grey' lw 2.5 pt 7 ps 1.0 pointinterval 20
        literal set linetype 5 lc rgb 'grey' lw 1.5 pt 7 ps 0.5 pointinterval 20
        literal set linetype 6 lc rgb 'grey' lw 1.5 pt 7 ps 0.5 pointinterval 20
    end plot --output="@fpath"
end function

#############

function void doKS (bundle *b)
    # FIXME: change this to use scores2x2 from extra.gfn once it's ready!

    # apply defaults
    if !inbundle(b, "verb")
        b.verb = 0
    endif

    series y = b.yup		# Binary of var. of actual ups
    series fc = b.fcup		# Binary of var. of forecasted ups
    smpl y fc --no-missing
    if rows(values(y)) > 2 || rows(values(fc)) > 2
        printf "*** Note: Running the Kuipers score requires that ***\n"
        printf "*** y and fc are both binary variables! Check again! *** \n"
        funcerr "Check that y and fc are both binary variables!"
    endif
    # M has the form:
    # 		 | Up (Y=1) Down (Y=0)
    # ------------------------------
    # U (F=1)| Hits		False alarms
    # D (F=0)| Misses	Correct reject.
    matrix M = zeros(2,2)
    M[1,1:2] = sum(y==1 && fc==1) ~ sum(y==0 && fc==1)
    M[2,1:2] = sum(y==1 && fc==0) ~ sum(y==0 && fc==0)
    scalar hi = M[1,1] / sumc(M[,1])	# hit rate
    scalar fa = M[1,2] / sumc(M[,2])	# false alarm rate
    if b.verb == 1
        printf "\n*************************\n"
        printf "*** Kuipers Score ***\n"
        printf "Hit Rate        = %.3f\n", hi
        printf "False Alarm Rate = %.3f\n", fa
        printf "Kuipers Score   = %.3f\n", hi-fa
        printf "\n*************************\n"
    endif
    b.KShit = hi
    b.KSfalse = fa
    b.KSstat = hi-fa
    colnames(M, "Y=1 Y=0")
    rownames(M, "Yhat=1 Yhat=0")
    b.KSmat = M
end function

###################

/*
   Function computing 2 forecast accuracy statistics used for
   probability forecasts

   Log Probability Score (LPS) (penalizes large forecast errors
   more heavily
   Quadratic Probability Score (QPS) (similar to MSE for metric data)

*/
function matrix probscore (matrix y "Binary of actuals",
                           matrix Pr "Estimated probability")
    # By Artur
    # Returns a 1x2 vector with QPS, LPS

    # check for vector
    if xmin(rows(y), cols(y)) > 1 || xmin(rows(Pr), cols(Pr)) > 1
        funcerr "Need vector inputs!"
    endif

    # work with column vector
    y = vec(y)
    Pr = vec(Pr)

    if rows(Pr) == rows(y)
        matrix B = ok(Pr)						# Check for NAs
        matrix Pr2 = (Pr .> 0.9999) ? 0.999 : Pr	# relevant for comp. log(1-Pr2) for LPS-comput.
        if sumc(B ? Pr : 0) > 0
            scalar T = sumc(B)					# Valid obs.
            # OLD: matrix QPS =  T^-1 * sumc( (Pr-y).^2 )
            matrix QPS = sumc(B ? ((Pr-y).^2) : 0) ./ T
            # OLD: matrix LPS = -T^-1 * sumc( (1-y) .* log(1-Pr) + y .* log(Pr) )
            matrix LPS = -sumc( B ? ((1-y) .* log(1-Pr2) + y .* log(Pr2)) : 0 ) ./ T
        else
            matrix QPS = zeros(1,1)
            matrix LPS = zeros(1,1)
        endif
        matrix mout = QPS ~ LPS
        colnames(mout, "QPS LPS")
    else
        printf "\nError probscore function:\n"
        printf "The series are not of the same length.\n"
        return {}
    endif
    return mout
end function

# ---------------------------------------------

function matrices CamDufStats( matrix mdat,
                              matrix whichlags[null], int recenter[0:2:0])
    # (switched the arg ordering ...)
    /*
       Function to calculate the test statistics from
       Campbell & Dufour 1995 (C&D), which are sign statistics
       and related --but not all identical-- to
       Wilcoxon test statistics.

       'mdat': The first column is Y_t in C&D,
       the remaining columns are different X_t 's (or g_t 's).
       (If only a single column exists in mdat, then it is assumed
       that g_t = Y_t; effectively Y_t is tested against its own lags.)

       'whichlags': Specify which lags for the X_t (g_t) should be
       used. The lags apply to all the X_t (g_t)'s. Negative lags
       are an error. Each lags needs to be given separately,
       e.g. {1,2,3}.
       Optional; the default is to use just the first lag.

       Special convenience case for unbiasedness test:
       Put a single column in 'mdat' and set 'whichlags' to {0}
       (gretl also accepts scalar 0), then:
       The sign and signed-rank statistics then refer directly to Y_t.

       'recenter': If 1, then subtracts a recursively calculated
       median from the X_t (g_t)'s;
       If 2, a mean.
       If 3 (not yet implemented), some trend

       For a single set of test statistics, only 2 columns (or 1)
       and a one-element matrix 'whichlags' are needed.
       With more columns or more lags, this is not a joint test,
       but just several tests in one go. (The first column against
       all others.)

       Output are 3 matrices in an array:
       (L: number of chosen lag specs in whichlags,
       K: number of X_t (g_t)'s, i.e. max(cols(mdat)-1, 1) )

       First: L x K matrix of sign stats Sg
       Second: L x K matrix of special signed rank stats SRg
       Third: L x K matrix of standard Wilcoxon signed rank stats Wg
       Fourth: L x 1 vector of effective sample lengths used
    */

    # basic choices
    if !exists(whichlags)
        matrix whichlags = {1} # the default
    else
        whichlags = vec(whichlags)	# ensure vector
    endif

    # some checks
    r = rows(mdat)
    if max(whichlags) >= r - 1
        funcerr "lag is too large for sample length"

    elif min(whichlags) < 0
        funcerr "lags must not be negative"

    elif min(whichlags) == 0 && cols(mdat) > 1
        funcerr "unbiasedness test on itself only valid for single variable"

    endif

    # handle special case unbiasedness of Y_t
    if !min(whichlags)
        whichlags = {0}	# just to be on the safe side
        if recenter
            funcerr "unbiasedness test incompatible with recentering"
        endif

        # handle the convenience case of own lags
    elif cols(mdat) == 1
        mdat = mdat ~ mdat # copy 1st col to 2nd col
    endif

    matrix X = (cols(mdat) > 1) ? mdat[, 2:] : mdat[, 1]

    ## recursive recentering, at least 2 obs. required
    # cf. C&G97 p. 9
    if recenter

        matrix Xc = zeros(rows(X) -  1, cols(X))	# hold re-centered values

        loop i = 2..rows(X) -q	# at least 2 obs., re-centering procedure
            if recenter == 1
                Xc[i - 1,] = X[i, ] - quantile(X[1:i, ], 0.5)

            elif recenter == 2
                Xc[i - 1,] = X[i, ] - meanc( X[1:i, ] )

                # elif recenter == 3	# linear trend
                # TODO: could be implemented by running a simple regression
            endif
        endloop
    endif	# recentering

    # go over all lags
    matrix effTs = {} # to hold effective sample lengths
    matrix Sg = {} 	# will hold the sign stats (eq (7))
    matrix SRg = {} 	# to hold their own sign-rank stat (eq (9))
    # (empty for convenience case)
    matrix Wg = {} 	# Wilcoxon, eq(8)
    loop lix = 1..nelem(whichlags) -q
        lag = int(whichlags[lix])

        # do it for all g_t 's in parallel
        if lag
            matrix temp = recenter ? Xc : X
            matrix glag = mlag(temp, lag)[1 + lag : ,]

            # adjust the common sample length
            delta = rows(mdat) - rows(glag)
            matrix ycut = mdat[1 + delta :, 1]
            effTs |= rows(ycut)
            matrix prod = ycut .* glag

        else # the convenience case, do it on itself!
            effTs |= rows(mdat)
            matrix prod = mdat
        endif

        matrix prodsigns = (prod .> 0)

        # stack the new sign stats vertically
        Sg |= sumc(prodsigns)

        if lag # not for unbiasedness
            # the ranking of abs Y, i.e. R+2
            matrix Rplus2 = ranking(abs(ycut))

            # stack the new signed-rank stats vertically
            SRg |= sumc( prodsigns .* Rplus2 )
        endif

        # the ranking of the products, i.e. R+1
        matrix Rplus1 = {}
        loop i=1..cols(prod) -q
            Rplus1 ~= ranking( abs(prod[, i]) )
        endloop
        Wg |= sumc( prodsigns .* Rplus1 )

    endloop # through the lag indices

    return defarray(Sg, SRg, Wg, effTs)
end function	# CamDufStats

# -----------------------------------------
