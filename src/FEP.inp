# This file is the new main file for FEP, introduced by Sven for 1.3.
# It only holds the new GUI-related "glue" function(s),
#  and pulls in all other background functions (public and private).

# Index:
# GUI_FEP (for menu attachment)
# GUI_FEP_print (the special "bundle-print" function)

include FEP_private.inp
include FEP_public.inp
include FEP_tests_individual.inp # also public functions in there
include FEP_tests_other.inp
include FEP_wrappers.inp # also public functions in there


# --------------------------------------

function bundle GUI_FEP(
    int which[1:10:] "Choose test" \
                        {"Mincer-Zarnowitz (MZ)",
      "Holden-Peel (HP)",
      "Diebold-Lopez (DL)",
      "Elliott-Komunjer-Timmermann (EKT)",
      "(Hanssen-) Kuiper score (KS)",
      "Pesaran-Timmermann (PT)",
      "Campbell-Ghysels (CG)",
      "Diebold-Mariano (DM)",
      "Giacomini-White (GW)",
	  "Clark-West (CW)"},

      series realiz "Realizations",
      series fc[null] "Forecasts",
      int flexarg[0::0] "bootrep (MZ,HP) / horizon (DM,GW,CW) / lag (CG)",
      int robortype[0:1:0] "robust (MZ,HP,PT) / loss (DM,GW,EKT)" \
      {"standard /U-shape", "robust /V-shape"},
      int cond[0:1:0] "conditional predictive ability (GW)" \
      {"unconditional", "conditional"},
      int verbosity[0:1:0] "Verbosity" {"no details", "print details"},
      series fc2[null] "Alternative forecasts (DM,GW,CW)",
      scalar shape[0:1:0.5] "Shape param (EKT)",
      list zli[null] "info set (HP,GW), instr (EKT), further (CG)",
      string lossdraw[null] "Actual path, or 'no' or 'display' (EKT)"  )

    ###
    # copy the choice to string code
    strings sarr = defarray("MZ","HP","DL","EKT","KS","PT","CG", \
		"DM","GW","CW")

    bundle b
    ## process args
    string b.code = sarr[which]
    # process realiz
    if b.code == "KS" || b.code == "PT" || b.code == "DL"
        series b.yup = realiz

    elif strlen(strstr("CG EKT" , b.code))
        if exists(fc)	# expected case
            series b.E = realiz - fc # calculate FC errors, input for CG*/EKT
        else
            print "No forecasts given, treating single input as errors."
            series b.E = realiz
        endif

    else
        series b.y = realiz
    endif

    # process fc (and also fc2)
    if exists(fc)
        if b.code == "KS" || b.code == "PT" || b.code == "DL"
            series b.fcup = fc
        elif b.code == "DM" || b.code == "GW" || b.code == "CW"
            if exists(fc2)
                series b.f1 = fc
                series b.f2 = fc2
            else
                funcerr "Need 2nd forecast (fc2) input!"
            endif

        else
            series b.fc = fc
        endif

    elif strlen(strstr("DL HP MZ KS PT DM GW CW", b.code))	# and here: fc is null
        funcerr "Need forecast (fc) input!"
    endif

    # process flexarg
    if b.code == "MZ" || b.code == "HP"
        b.nboot = flexarg	# bootstrap replications

    elif b.code == "CG"
        b.k = flexarg	# lag at which to test

    elif b.code == "DM" || b.code == "GW" || b.code == "CW"
        b.fhor = flexarg	# horizon
    endif

    # process robortype
    if b.code == "MZ" || b.code == "HP" || b.code == "PT"
        scalar b.robust = robortype

    elif b.code == "DM" || b.code == "EKT"
        b.loss = robortype + 1
        # for EKT we had: q-q-shape (p0=2) / lin-lin-shape (p0=1)
    endif
    
    # conditional test argument
    if b.code == "GW"
        scalar b.cond = cond
    endif    

    # copy verbosity setting
    scalar b.verb = verbosity

    # process zli
    if b.code == "HP"
        list b.z = zli

    elif b.code == "CG" # needs series
        if !nelem(zli) || nelem(zli) > 1
            funcerr "CG needs one-element zli list input"
        else
            series b.CGX = zli[1]
        endif

    elif b.code == "EKT"
        if !nelem(zli)
            funcerr "EKT needs some instruments (zli)"
        endif

        list b.z = zli
    endif

    # process other args
    if exists(lossdraw)
        string b.lossdraw = lossdraw # EKT
    else
        string b.lossdraw = "no" # default
    endif
    b.a0 = shape # EKT only

    # call the function
    applyFCtests(&b, b.code)

    GUI_FEP_print(&b)	# new to accommodate removal of no-print

    return b
end function

#########################

function void GUI_FEP_print(bundle *b)
    # This refers to the bundle returned by GUI_FEP.
    printf "Your choice: %s test\n", fullname(b.code)

    if b.code == "KS"
        # printf "*** Kuipers Score ***\n"
        printf "Hit Rate        = %.3f\n", b.KShit
        printf "False Alarm Rate = %.3f\n", b.KSfalse
        printf "Kuipers Score   = %.3f\n", b.KSstat
        matrix mtemp = b.KSmat
        print mtemp

    elif b.code == "EKT"
        print "Test the null hypothesis of symmetry (alfa = 0.5):"
        printf "  test stat %g (p-value %g)\n", b.SymTest, b.SymPval
        print "Rationality test:"
        printf "  test stat %g (p-value %g)\n", b.RatTest, b.RatPv
        print "Rationality test (under symmetry):"
        printf "  test stat %g (p-value %g)\n", b.RatTest05, b.RatPv05

    elif b.code == "HP"
        if b.nboot
            printf "(bootstrapped) "
        endif
        if b.robust
            printf "(robust SE)"
        endif
        printf "\nTest stat %g (p-value %g)\n", b.HPstat, b.HPpval

    elif b.code == "DL"
        printf "Test stat %g (p-value %g)\n", b.DLstat, b.DLpval
        printf " (additional info better/worse: %g)\n", b.DLinfo

    elif b.code == "DM"
        if b.loss == 1
            string shape = "U"
        elif b.loss == 2
            string shape = "V"
        endif
        printf "(Loss function shape: %s)\n", shape
        printf "Test stat %g, p-value %g (t-dist based)\n", b.DMstat, b.pvalt
        printf "  (small-sample corrected p-value %g)\n", b.DMpvalssc

    elif b.code == "GW"
        if b.loss == 1
            string shape = "U"
        elif b.loss == 2
            string shape = "V"
        endif
        printf "(Loss function shape: %s)\n", shape
        printf "Test stat %g, p-value %g (chi^2-dist based)\n", b.GWstat, b.GWpval
        if b.sign<0
            printf "Sign of the mean of the loss is (-) -- 1st model dominates\n"
        else
            printf "Sign of the mean of the loss is (+) -- 2nd model dominates\n"
        endif
        
	elif b.code == "CW"	# Clark-West 
		print "FIXME: The null hypothesis is... the smaller model dominates...?"
		printf "Test stat %g, p-value %g\n", b.CWstat, b.CWpval

    elif b.code == "MZ"
        if b.nboot
            printf "(bootstrapped) "
        endif
        if b.robust
            printf "(robust SE)"
        endif
        printf "Test stat %g (p-value %g)\n", b.MZstat, b.MZpval

    elif b.code == "PT"
        if !b.robust
            print "(Regression approach using asymptotic VCV.)"
        elif b.robust
            print "(Regression approach using HAC robust VCV.)"
        endif
        print "H0: y(t) and x(t) are distributed independently"
        printf "Test stat %.4f (p-value: %.4f)\n", b.PTstat, b.PTpval

    elif b.code == "CG"
        print "Signed rank test (Wilcoxon-type)"
        print "H0: Median = 0, H1: Median != 0"
        print "(Additional assumption of symmetry around 0 under H0.)"
        printf "Test stat %g (p-value %g)\n", b.CGWILCstat, b.CGWILCpval
        print "---"
        print "Sign test"
        print "H0: Median = 0, H1: Median != 0"
        printf "Test stat %g (p-value %g)\n", b.CGSIGNstat, b.CGSIGNpval

    else
        funcerr "The choice in b.code didn't match anything"
    endif
end function

