clear
set verbose off
include FEP.gfn --force
open FEPdata.gdt --frompkg=FEP

#--------
# MZ test
#--------
bundle b = null
b.y = y						# realizations
b.fc = fc					# forecasts
b.nboot = 999				# 0=NO bootstrap, nboot>0 --> use nboot replications
b.robust = 1				# 1=robust HAC robust VCV
b.verb = 1					# 1=print details
applyFCtests(&b, "MZ")		# call the top-level function
print b						# print bundle input
   
#--------------------
# HP (former KG) test
#--------------------
bundle b = null
b.y = y
b.fc = fc
list z = time
b.z = z
b.nboot = 999
b.robust = 1
b.verb = 1
applyFCtests(&b, "HP")
print b
   
#------------------
# CG tests
#------------------
bundle b = null
scalar variant = 1			# for illustration only
if variant == 1				# let FEP compute the forecast errors
    b.y = y
    b.fc = fc
else
    series E = y - fc	# define on your own the forecast errors
    b.E = E
endif
b.k = 0						# k=0-->Test on unbiasedness (default); k>0 for efficiency test (serial correlation)
# b.CGX = time				# add conditional regressor -- will call the orthogonality test iff k>0
b.verb = 1					# 1=print details
applyFCtests(&b, "CG")
print b

#-----------------
# Diebold & Lopez
#-----------------
bundle b = null
b.yup = (diff(y) > 0)
b.fcup = (diff(fc) > 0)
b.verb = 1					# 1=print details
applyFCtests(&b, "DL")
print b

#---------------
# Kuipers Score
#---------------
bundle b = null
b.yup = (diff(y) > 0)
b.fcup = (diff(fc) > 0)
b.verb = 1					# 1=print details
applyFCtests(&b, "KS")
print b

#----------------------------
# Pesaran & Timmermann (1992)
#----------------------------
bundle b = null
b.yup = (diff(y) > 0)
b.fcup = (diff(fc) > 0)
# b.PTmeth = 2				# 1=correlation based, 2=regression based with HAC VCV
b.robust = 1
b.verb = 1					# 1=print details
applyFCtests(&b, "PT")
print b

#------------------
# Diebold & Mariano
#------------------
bundle b = null
b.y = y
b.f1 = fc		# FC 1 series
b.f2 = fc(-1)	# FC 2 series
b.loss = 2			# 1="U-shape", 2="V-shape" 
b.verb = 1
# b.fhor = 1			# for small-sample corrected critical values (default=1)
applyFCtests(&b, "DM")
print b

#------------------
# Giacomini & White
#------------------
bundle b = null
b.y = y
b.f1 = fc			# FC 1 series
b.f2 = fc(-1)		# FC 2 series
b.loss = 2			# 1="U-shape" (default), 2="V-shape" 
b.verb = 1
b.cond = 1			# 0=un-, 1=conditional
list b.z = fc(-2)	# conditioning variables
# b.fhor = 1			# forecast horizon (default=1)
applyFCtests(&b, "GW")
print b

#-------------
# Clark & West
#-------------
bundle b = null
b.y = y
b.f1 = fc			# Forecast from parsimonious model
b.f2 = fc + 0.1*fc(-1)    # Forecast from the larger model that nests model 1
# (The test result here appears to be "on the wrong" side 
# for a one-sided test...!?)
b.verb = 1
# b.fhor = 1			# forecast horizon (default=1)
applyFCtests(&b, "CW")
print b

#------------------------------------
# Elliott, Komunjer, Timmermann
# Example 1 using doEKTtest_series()
#------------------------------------
bundle b = null
b.p0 = 2					# Loss function (lin-lin = 1, quad-quad = 2)
scalar variant = 1			# for illustration only
series fcerr = y-fc
series fcerr1 = fcerr(-1)	# additional instrument (intercept included per default)
if variant == 1				# let the function compute the forecast error
    b.y = y
    b.fc = fc
elif variant == 2
    b.E = fcerr				# Forecast Error
endif
b.z = fcerr1  
smpl fcerr fcerr1 --no-missing
b.a0 = 0.5					# Initial value of shape parameter aT
b.verb = 0
b.lossdraw = "display"	# 'no=no draw, 'display'=immediate plot, 'Path+filename'
applyFCtests(&b, "EKT")
print b
scalar a1 = b.alpha		# store a-symmetry parameter
scalar V1 = b.V			# store variance of a1
print a1 V1
smpl full
#------------
# Example 2
#------------
bundle b = null
b.p0 = 2
smpl fcerr fcerr1 --no-missing
b.E = fcerr
b.z = fcerr1
b.a0 = 0.5
b.verb = 1
b.lossdraw = "no"
applyFCtests(&b, "EKT")
print b
scalar a2 = b.alpha
scalar V2 = b.V
# Draw both loss functions jointly #
DrawLoss2 (b.p0, a1, V1, a2, V2, "display")
smpl full

#---------------------------------
# doPS(): evaluate binary outcomes
#---------------------------------
series UP = (diff(y) > 0)
logit UP 0 fc --quiet	# Estimate probabilities using a logit model for illustration
series pr = $yhat			# estimated probabilities that Pr(UP|I)=1
# use directly probscore()
probscore({UP},{pr})
# alternatively use the wrapper doPS() using the bundle expression
bundle b = null
b.yup = UP
b.pfc = pr
doPS(&b)
print b

#--------------------------------------------
# ForecastMetrics(): Evaluate point forecasts
#--------------------------------------------
list FC = fc diff(fc)		# use list for illustration
matrix fc_eval = ForecastMetrics(y, FC)
print fc_eval
stop

#-----------------------------------------------
# Compute forecast error losses using getLoss()
#-----------------------------------------------
matrix m = mnormal(25, 3)
matrix result = getLoss(m)
print result
result = getLoss(m, "sq", 1)
print result
result = getLoss(m, "linlin")
print result
result = getLoss(m, "linlin", 0.3)
print result
result = getLoss(m, "qq", 0)
print result
result = getLoss(m, "linex", {-3})
print result
matrix prm = {0.1, 0.2}
result = getLoss(m, "dlinex", prm)
print result
result = getLoss(m, "sq", 0.5, ones(25,1))
print result
