set verbose off
clear

include assertion.gfn

include "./src/FEP.inp" --force

function void test_getForecastMetricsNames (void)
    print "Start testing getForecastMetricsNames()"

    strings S = getForecastMetricsNames()

    expected_n = 17
    strings expected_names = defarray(\
                                      "ME",\
                                      "RMSE",\
                                      "MAE",\
                                      "MPE",\
                                      "MAPE",\
                                      "MdAPE",\
                                      "RMSPE",\
                                      "RMdSPE",\
                                      "sMAPE",\
                                      "sMdAPE",\
                                      "sMAAPE",\
                                      "sMdAAPE",\
                                      "MdE",\
                                      "MdAE",\
                                      "MAM",\
                                      "MdAMd",\
                                      "MSLE"\
                                      )

    assert(nelem(S) == expected_n)

    loop foreach i expected_names
        assert(S[1] == "$i")
    endloop
end function
test_getForecastMetricsNames()


open "./data/FEPdata.gdt" -p
function void test_get_fc_error (const series y,
                                const series fc)
    print "Start testing get_fc_error()."

    series e = get_fc_error(y, fc)

    assert(nobs(e) == 18)
    assert_almost_equal_num(mean(e), 0.1579, 1e-4)
end function
test_get_fc_error(y, fc)


open "./data/FEPdata.gdt" -p
function void test_get_fc_error_nan (series y,
                                     const series fc)
    print "Start testing get_fc_error() with NA."

    y[1] = NA
    series e = get_fc_error(y, fc)

    assert(nobs(e) == 17)
    assert_almost_equal_num(mean(e), 0.13054, 1e-5)
end function
test_get_fc_error_nan(y, fc)



open "./data/FEPdata.gdt" -p
function void test_pct_error (const series y,
                              const series fc)
    print "Start testing pct_error()."

    series e = y - fc
    series pce = pct_error(y, e)

    assert(nobs(pce) == 18)
    assert_almost_equal_num(mean(pce), 7.3884, 1e-4)
end function
test_pct_error(y, fc)


open "./data/FEPdata.gdt" -p
function void test_pct_error_nan (series y,
                                  const series fc)
    print "Start testing pct_error() with NA."

    y[1] = NA
    series e = y - fc
    series pce = pct_error(y, e)

    assert(nobs(pce) == 17)
    assert_almost_equal_num(mean(pce), 6.0961, 1e-5)
end function
test_pct_error_nan(y, fc)


open "./data/FEPdata.gdt" -p
function void test_fcstats_names (const series y,
                            const series fc)
    print "Start testing metrics names of fcstats()."

    matrix m = fcstats(y, fc)
    strings names = rnameget(m)

    strings expected_names = defarray(\
                                      "ME",\
                                      "RMSE",\
                                      "MAE",\
                                      "MPE",\
                                      "MAPE",\
                                      "U",\
                                      "UM",\
                                      "UR",\
                                      "UD"\
                                      )

    assert(rows(m) == 9)
    assert(nelem(names) == 9)

    loop foreach i expected_names
        assert(names[1] == "$i")
    endloop
end function
test_fcstats_names(y, fc)


open "./data/FEPdata.gdt" -p
function void test_fcstats_metrics (const series y,
                                    const series fc)
    print "Start testing metric values fcstats()."

    matrix m = fcstats(y, fc)

    assert(rows(m) == 9)

    assert_almost_equal_num(m[1], 0.15792, 1e-5)
    assert_almost_equal_num(m[2], 0.40101, 1e-5)
    assert_almost_equal_num(m[3], 0.36285, 1e-5)
    assert_almost_equal_num(m[4], 7.3884, 1e-4)
    assert_almost_equal_num(m[5], 26.807, 1e-3)
    assert_almost_equal_num(m[6], 0.20702, 1e-5)
    assert_almost_equal_num(m[7], 0.15509, 1e-5)
    assert_almost_equal_num(m[8], 0.25280, 1e-5)
    assert_almost_equal_num(m[9], 0.59211, 1e-5)
end function
test_fcstats_metrics(y, fc)


open "./data/FEPdata.gdt" -p
function void test_MdAPE (const series y,
                          const series fc)
    print "Start testing MdAPE()."

    series e = y - fc
    scalar value = MdAPE(y, e)

    assert_almost_equal_num(value, 20.031229, 1e-6)
end function
test_MdAPE(y, fc)


open "./data/FEPdata.gdt" -p
function void test_RMdSPE (const series y,
                           const series fc)
    print "Start testing RMdSPE()."

    series e = y - fc
    scalar value = RMdSPE(y, e, FALSE)

    assert_almost_equal_num(value, 33.748554, 1e-6)
end function
test_RMdSPE(y, fc)


open "./data/FEPdata.gdt" -p
function void test_RMdSPE_median (const series y,
                                const series fc)
    print "Start testing RMdSPE() median."

    series e = y - fc
    scalar value = RMdSPE(y, e, TRUE)

    assert_almost_equal_num(value, 20.102812, 1e-6)

end function
test_RMdSPE_median(y, fc)

open "./data/FEPdata.gdt" -p
function void test_sMdAPE (const series y,
                          const series fc)
    print "Start testing sMdAPE()."

    scalar value = sMdAPE(y, fc, FALSE)
    assert_almost_equal_num(value, 13.782535, 1e-6)
end function
test_sMdAPE(y, fc)

open "./data/FEPdata.gdt" -p
function void test_sMdAPE_median (const series y,
                                const series fc)
    print "Start testing sMdAPE() for median."

    scalar value = sMdAPE(y, fc, TRUE)
    assert_almost_equal_num(value, 17.974963, 1e-6)
end function
test_sMdAPE_median(y, fc)


open "./data/FEPdata.gdt" -p
function void test_sMdAAPE (const series y,
                          const series fc)
    print "Start testing sMdAAPE()."

    scalar value = sMdAAPE(y, fc, FALSE)
    assert_almost_equal_num(value, 27.144854, 1e-6)
end function
test_sMdAAPE(y, fc)

open "./data/FEPdata.gdt" -p
function void test_sMdAAPE_median (const series y,
                                const series fc)
    print "Start testing sMdAAPE() for median."

    scalar value = sMdAAPE(y, fc, TRUE)
    assert_almost_equal_num(value, 22.280499, 1e-6)
end function
test_sMdAAPE_median(y, fc)


open "./data/FEPdata.gdt" -p
function void test_MdE (const series y,
                        const series fc)
    print "Start testing MdE()."

    series e = y - fc

    scalar value = MdE(e)
    assert_almost_equal_num(value, 0.22011449, 1e-8)
end function
test_MdE(y, fc)


open "./data/FEPdata.gdt" -p
function void test_MdAE (const series y,
                        const series fc)
    print "Start testing MdAE()."

    series e = y - fc

    scalar value = MdAE(e)
    assert_almost_equal_num(value, 0.37605234, 1e-8)
end function
test_MdAE(y, fc)


open "./data/FEPdata.gdt" -p
function void test_MADMean (const series y,
                            const series fc)
    print "Start testing MADMean()."

    series e = y - fc

    scalar value = MADMean(y, e, FALSE)
    assert_almost_equal_num(value, 0.29630472, 1e-8)
end function
test_MADMean(y, fc)


open "./data/FEPdata.gdt" -p
function void test_MADMean_median (const series y,
                                   const series fc)
    print "Start testing MADMean() for median."

    series e = y - fc

    scalar value = MADMean(y, e, TRUE)
    assert_almost_equal_num(value, 0.21548623, 1e-8)
end function
test_MADMean_median(y, fc)


open "./data/FEPdata.gdt" -p
nulldata 4 --preserve
function void test_MSLE (void)
    print "Start testing MSLE()."

    series y = {3, 5, 2.5, 7}'
    series fc = {2.5, 5, 4, 8}'

    value = MSLE(y, fc)
    assert_almost_equal_num(value, 0.03973, 1e-4)
end function
test_MSLE()


open "./data/FEPdata.gdt" -p
function void test_ForecastMetrics (const series y,
                                    const series fc)
    print "Start testing ForecastMetrics()."

    strings names = getForecastMetricsNames()
    matrix values = ForecastMetrics(y, fc)

    scalar value = values[instrings(names, "ME")]
    assert_almost_equal_num(value, 0.15792, 1e-5)

    scalar value = values[instrings(names, "MdE")]
    assert_almost_equal_num(value, 0.22011, 1e-5)

    scalar value = values[instrings(names, "RMSE")]
    assert_almost_equal_num(value, 0.40101, 1e-5)

    scalar value = values[instrings(names, "MAE")]
    assert_almost_equal_num(value, 0.36285, 1e-5)

    scalar value = values[instrings(names, "MPE")]
    assert_almost_equal_num(value, 7.3884, 1e-4)

    scalar value = values[instrings(names, "MAPE")]
    assert_almost_equal_num(value, 26.807, 1e-3)

    scalar value = values[instrings(names, "MdAPE")]
    assert_almost_equal_num(value, 20.031229, 1e-6)

    scalar value = values[instrings(names, "RMSPE")]
    assert_almost_equal_num(value, 33.748554, 1e-6)

    scalar value = values[instrings(names, "RMdSPE")]
    assert_almost_equal_num(value, 20.102812, 1e-6)

    scalar value = values[instrings(names, "sMAPE")]
    assert_almost_equal_num(value, 13.782535, 1e-6)

    scalar value = values[instrings(names, "sMdAPE")]
    assert_almost_equal_num(value, 17.974963, 1e-6)

    scalar value = values[instrings(names, "sMAAPE")]
    assert_almost_equal_num(value, 27.144854, 1e-6)

    scalar value = values[instrings(names, "sMdAAPE")]
    assert_almost_equal_num(value, 22.280499, 1e-6)

    scalar value = values[instrings(names, "MdAE")]
    assert_almost_equal_num(value, 0.37605234, 1e-8)

    scalar value = values[instrings(names, "MAM")]
    assert_almost_equal_num(value, 0.29630472, 1e-8)

    scalar value = values[instrings(names, "MdAMd")]
    assert_almost_equal_num(value, 0.21548623, 1e-8)

    scalar value = values[instrings(names, "MSLE")]
    assert_almost_equal_num(value, 0.15320, 1e-5)
end function
test_ForecastMetrics(y, fc)


printf "\nInfo: All tests passed.\n"
